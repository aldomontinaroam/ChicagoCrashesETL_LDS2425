# -*- coding: utf-8 -*-
"""Data cleaning 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y6nMpxTVgWuzKjdFHwwK7xvW3itkiuut
"""

from google.colab import drive
drive.mount('/content/drive')

"""Caricamento del dataset e gestione avanzata delle virgole per definire bene le colonne.
Trasformazione in int dei valori nelle colonne: VEHICLE_ID, VEHICLE_YEAR, OCCUPANT_CNT.
"""

class DataFrame:
    def __init__(self, data, columns):
        self.data = data
        self.columns = columns
        # Verifica che ogni riga abbia lo stesso numero di colonne
        self._validate_data()

    def _validate_data(self):
        """Verifica che ogni riga abbia lo stesso numero di colonne dell'intestazione."""
        for i, row in enumerate(self.data):
            if len(row) != len(self.columns):
                print(f"Attenzione: la riga {i + 1} ha {len(row)} colonne, atteso {len(self.columns)}. Controlla il file CSV.")

    def head(self, n=5):
        return self.data[:n]

    def get_column(self, column_name):
        """Ritorna una colonna come una lista."""
        if column_name in self.columns:
            index = self.columns.index(column_name)
            return [row[index] for row in self.data]
        else:
            raise ValueError(f"Colonna '{column_name}' non trovata.")

    def __getitem__(self, column_name):
        """Permette di accedere come con df['column']"""
        return self.get_column(column_name)

    def __str__(self):
        """Visualizza i dati in un formato tabellare."""
        rows = [self.columns] + self.head()
        col_widths = [max(len(str(value)) for value in col) for col in zip(*rows)]
        formatted_rows = []
        for row in rows:
            formatted_row = " | ".join(str(value).ljust(width) for value, width in zip(row, col_widths))
            formatted_rows.append(formatted_row)
        return "\n".join(formatted_rows)

    def convert_to_int(self, column_name):
        """Converte i valori di una colonna specificata in interi, gestendo valori non numerici."""
        if column_name in self.columns:
            index = self.columns.index(column_name)
            for row in self.data:
                value = row[index].strip()
                try:
                    # Converte in float e poi in int per evitare problemi con i numeri decimali come '1.0'
                    row[index] = int(float(value))
                except ValueError:
                    row[index] = None  # Valore non convertibile
        else:
            raise ValueError(f"Colonna '{column_name}' non trovata.")

def read_csv(file_path):
    with open(file_path, 'r') as file:
        headers = file.readline().strip().split(',')
        data = []
        for line in file:
            values = []
            current_value = ""
            inside_quotes = False
            for char in line:
                if char == '"' and not inside_quotes:
                    inside_quotes = True
                elif char == '"' and inside_quotes:
                    inside_quotes = False
                elif char == ',' and not inside_quotes:
                    values.append(current_value.strip())
                    current_value = ""
                else:
                    current_value += char
            values.append(current_value.strip())  # Aggiunge l'ultimo valore

            # Controlla che la riga abbia il numero corretto di colonne
            if len(values) != len(headers):
                print(f"Attenzione: la riga ha {len(values)} colonne, atteso {len(headers)}. Controlla il file CSV.")
            data.append(values)

    # Crea e ritorna un oggetto DataFrame-like
    return DataFrame(data, headers)

# Esempio di utilizzo
df = read_csv('/content/drive/MyDrive/Progetto Decision support system/Vehicles.csv')

# Verifica la struttura dei dati
print("Verifica struttura dati:")
df._validate_data()

# Converte le colonne specificate in int
df.convert_to_int('VEHICLE_ID')
df.convert_to_int('VEHICLE_YEAR')
df.convert_to_int('OCCUPANT_CNT')

# Stampa le prime 5 righe per verificare la conversione
print(df)

"""Creazione delle colonne DATE  e HOUR da CRASH_DATE.
Le ho messe subito dopo CRASH_DATE
"""

def add_date_and_hour_columns(dataframe):
    # Trova l'indice della colonna CRASH_DATE
    crash_date_index = dataframe.columns.index('CRASH_DATE')

    # Crea le nuove colonne DATE e HOUR
    for row in dataframe.data:
        full_date = row[crash_date_index]
        date_only = full_date.split(' ')[0]  # Estrae solo la parte della data
        time_only = full_date.split(' ')[1] + ' ' + full_date.split(' ')[2]  # Estrae solo la parte dell'orario con AM/PM

        # Inserisce DATE subito dopo CRASH_DATE e HOUR subito dopo DATE
        row.insert(crash_date_index + 1, date_only)
        row.insert(crash_date_index + 2, time_only)

    # Aggiorna le colonne per includere le nuove colonne DATE e HOUR
    dataframe.columns.insert(crash_date_index + 1, 'DATE')
    dataframe.columns.insert(crash_date_index + 2, 'HOUR')


add_date_and_hour_columns(df)

"""Creazione della colonna TRIMESTRE che ho messo dopo HOUR"""

def add_trimester_column(dataframe):
    # Trova l'indice della colonna HOUR
    hour_index = dataframe.columns.index('HOUR')

    # Crea la nuova colonna TRIMESTRE
    for row in dataframe.data:
        date_value = row[hour_index - 1]  # Ottiene la data dalla colonna DATE
        month = int(date_value.split('/')[0])  # Estrae il mese (assumendo formato 'MM/DD/YYYY')

        # Determina il trimestre in base al mese
        if 1 <= month <= 3:
            trimester = 1
        elif 4 <= month <= 6:
            trimester = 2
        elif 7 <= month <= 9:
            trimester = 3
        elif 10 <= month <= 12:
            trimester = 4
        else:
            trimester = None  # In caso di valori non validi

        # Inserisce il valore del trimestre subito dopo HOUR
        row.insert(hour_index + 1, trimester)

    # Aggiungi la nuova colonna TRIMESTRE alla lista delle colonne subito dopo HOUR
    dataframe.columns.insert(hour_index + 1, 'TRIMESTRE')


add_trimester_column(df)

"""Pulizia della colonna MODEL, ho eliminato tutto il superfluo"""

def clean_model_column(dataframe):
    # Trova l'indice della colonna MODEL
    model_index = dataframe.columns.index('MODEL')

    # Pulisce ogni valore nella colonna MODEL
    for row in dataframe.data:
        model_value = row[model_index]

        # Verifica se il valore è una stringa e non è None
        if isinstance(model_value, str):
            # Cerca la posizione del primo "(" o "," nella stringa
            paren_index = model_value.find('(')
            comma_index = model_value.find(',')

            # Prende la posizione più piccola, se esiste
            end_index = len(model_value)  # Di default prende tutta la stringa
            if paren_index != -1 and comma_index != -1:
                end_index = min(paren_index, comma_index)
            elif paren_index != -1:
                end_index = paren_index
            elif comma_index != -1:
                end_index = comma_index

            # Estrae la parte della stringa fino al primo "(" o ","
            cleaned_value = model_value[:end_index].strip()
            row[model_index] = cleaned_value  # Aggiorna il valore pulito nella riga


clean_model_column(df)

print(df)